{
  "openapi": "3.0.0",
  "info": {
    "version": "2.0",
    "title": "Sygna Bridge API",
    "description": "Only for Sygna Bridge VASPs. For Sygna Hub VASPs, please refer to https://github.com/CoolBitX-Technology/sygna-hub-api-doc",
    "contact": {}
  },
  "servers": [
    {
      "url": "https://test-api.sygna.io/v2",
      "description": "Bridge Sandbox server"
    },
    {
      "url": "https://{VASP-server}/v2",
      "description": "VASP Sandbox server"
    }
  ],
  "paths": {
    "/bridge/vasp": {
      "get": {
        "description": "Retrieve information of one or more Virtual Assets Service Provider.  \nThe signature in Response is from Sygna Bridge,and it can be verified by the Bridge public key.  \nVASPs can get Bridge's public key from their own registration email.",
        "summary": "Bridge/VASP",
        "tags": [
          "Bridge"
        ],
        "operationId": "Bridge/VASP",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "deprecated": false,
        "responses": {
          "200": {
            "description": "An arry of object containing information of one or more VASP",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bridgeVasp"
                },
                "examples": {
                  "response": {
                    "value": {
                      "vasp_data": [
                        {
                          "vasp_code": "VASPJPJT4",
                          "vasp_name": "VASP4 in Tokyo, Japan",
                          "vasp_pubkey": "04670af26edc74b1ae4e4acb6cef65dc0c3914528296aa48a6412f00cf0576d735d99e7cdd9da3daaef6fded244553597be9272d6cd2065a52cc7157264a2a4836"
                        },
                        {
                          "vasp_code": "VASPUSNY1",
                          "vasp_name": "VASP1 in New York, USA",
                          "vasp_pubkey": "048709ef46f46c7e89b58987b606dc54eda62f88424517667305d91b3e86b8847f1b44a9659831880a15885ec43a722f76c356ec0ee373a273a0a7900dcd077339"
                        },
                        {
                          "vasp_code": "SVCEJPJT",
                          "vasp_name": "SBIVC",
                          "vasp_pubkey": "0480664cd8fd8c93f0220eb0c2bab467608d90a291ea037b9932387f56a656f35e9a976a1623232643f82b1da0cf5b9a3bf2bda2b5cf30e5ee85a0d5a2011ea4f1"
                        },
                        {
                          "vasp_code": "VASPUSNY2",
                          "vasp_name": "VASP2 in New York, USA",
                          "vasp_pubkey": "04b1f14590a37c5c5fdcdc4f6d606eb383a79d5f6d72c210ec4fab47c2e9a59b4fd1149d8e8fa31ac1a04a9142cda2a479c642fb606eaac14c874fd7426e379f54"
                        },
                        {
                          "vasp_code": "VASPJPJT3",
                          "vasp_name": "VASP3 in Tokyo, Japan",
                          "vasp_pubkey": "04247bc554740852792dee49b8359cb25c74f2335d2c6e2025cd0880a06c8da1d51d461f720046c84da1dab106dfdac0452c92f09de7022a4cef5c4f3f6f3064d5"
                        }
                      ],
                      "signature": "9fb61c13dc4f74a18413aca7179cd62ad22aa88ea67fe4e9ff6fa5e6ddf5d2706d175d8965c3eadf0c1370b52a2ab211697b520633c74d00d2bfb120e610dae6",
                      "timestamp": 1584002280274
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bridge/vasp/beneficiary-endpoint-url": {
      "post": {
        "description": "This API allows requesting VASPs to update the self's callback URL programmatically, and at least one of the URLs must be specified in the request body.  \nThe requesting VASP needs to sign the body parameters with its private key to generate the signature in this API.",
        "summary": "Bridge/VASP/BeneficiaryEndpointUrl",
        "tags": [
          "Bridge"
        ],
        "operationId": "Bridge/BeneficiaryEndpointUrl",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bridgeCallbackUrl"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bridgeApiResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "status": "OK"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bridge/transaction/currencies": {
      "get": {
        "summary": "Bridge/Currencies",
        "tags": [
          "Bridge"
        ],
        "operationId": "bridge/currencies",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Retrieve all available cryptocurrencies in Sygna and their information.  \nPlease refer to the GET /currencies API response body for the \"key\" in each coin/token's extra information (addr_extra_info).",
        "parameters": [
          {
            "in": "query",
            "name": "currency_symbol",
            "description": "crypto currency symbol",
            "required": false,
            "schema": {
              "type": "string",
              "example": "BTC"
            }
          },
          {
            "in": "query",
            "name": "currency_id",
            "description": "crypto currency id",
            "required": false,
            "schema": {
              "type": "string",
              "example": "sygna:000001"
            }
          },
          {
            "in": "query",
            "name": "currency_name",
            "description": "crypto currency name",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Bitcoin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "get supported currencies successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bridgeSupportedCoins"
                },
                "examples": {
                  "response": {
                    "value": {
                      "supported_coins": [
                        {
                          "currency_id": "sygna:0x80000090",
                          "currency_name": "XRP",
                          "currency_symbol": "XRP",
                          "is_active": true,
                          "addr_extra_info": [
                            "tag",
                            "dt"
                          ],
                          "platform": null
                        },
                        {
                          "currency_id": "sygna:0x8000003c.0xde1e0ae6101b46520cf66fdc0b1059c5cc3d106c",
                          "currency_name": "DeltaChain",
                          "currency_symbol": "DELTA",
                          "is_active": true,
                          "addr_extra_info": [],
                          "platform": {
                            "id": "sygna:0x8000003c",
                            "name": "Ethereum",
                            "symbol": "ETH",
                            "token_address": "0xde1e0ae6101b46520cf66fdc0b1059c5cc3d106c"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      }
    },
    "/bridge/transaction/status": {
      "get": {
        "description": "Get status of specific Permission Request.  \nThe signature in Response is from Sygna Bridge,and it can be verified by the Bridge public key.  \nVASPs can get Bridge's public key from their own registration email.",
        "summary": "Bridge/Status",
        "tags": [
          "Bridge"
        ],
        "operationId": "Bridge/Status",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "deprecated": false,
        "parameters": [
          {
            "name": "transfer_id",
            "in": "query",
            "required": true,
            "description": "Unique `transfer_id` from [Bridge/PermissionRequest](ref:bridgepermissionrequest-3)",
            "schema": {
              "$ref": "#/components/schemas/bridgeTransferID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bridgeTransferStatus"
                },
                "examples": {
                  "response": {
                    "value": {
                      "transferData": {
                        "transfer_id": "778c0befbb99b21e398c545455622198b14ce403afa13f2b371349ff93da78a1",
                        "transaction": {
                          "originator_vasp": {
                            "vasp_code": "VASPJPJT4",
                            "addrs": [
                              {
                                "address": "bnb1vynn9hamtqg9me7y6frja0rvfva9saprl55gl4",
                                "addr_extra_info": [
                                  {
                                    "memo_text": "634346542"
                                  }
                                ]
                              }
                            ]
                          },
                          "beneficiary_vasp": {
                            "vasp_code": "VASPJPJT3",
                            "addrs": [
                              {
                                "address": "bnb1hj767k8nlf0jn6p3c3wvl0r0qfwfrvuxrqlxce",
                                "addr_extra_info": [
                                  {
                                    "memo_text": "Idzl1532434853"
                                  }
                                ]
                              }
                            ]
                          },
                          "currency_id": "sygna:0x800002ca.bnb1u9j9hkst6gf09dkdvxlj7puk8c7vh68a0kkmht"
                        },
                        "data_dt": "2019-07-29T06:29:00.123Z",
                        "expire_date": 1582218947,
                        "permission_request_data_signature": "2e31c7a2bb0db4ad1fb3aff20b3939ae0fb80267a5eb24beebaa8c66fe33c933443902e84cbd3369d657eb0bf69596cebf5b21c1e36517ea186466f4d73bc336",
                        "permission_status": "ACCEPTED",
                        "permission_signature": "20fe27be0af5f11657a21ab6d9f09b712406cbcbd3be2ffd30ecf7e59dfe135433f6ec14948fddf4e119d318374e02b7e3528dcf3e3b44698b420b97d985300c",
                        "txid_signature": null,
                        "created_at": "2019-09-20T02:08:19.050Z",
                        "transfer_to_originator_time": "2019-09-20T02:08:25.276Z"
                      },
                      "signature": "64ed8fd76816bd32ca033764ac0b1ce6b7987a83714c2abd2ef8ee06628fd1c73e3a8dabe13b344f2701f7d32388270a07b138bd83b5350d75f80d94614d8281"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bridge/transaction/permission-request": {
      "post": {
        "description": "The first step of the permission request flow. Should be called by the originator VASP to inform Sygna Bridge about the creation of a compliant transaction.\n\n\n![](https://i.imgur.com/zI8TwAL.png)  \nThe originator VASP should use its private key to construct a signature that includes the encrypted  private_info and other body parameters.  \nThe originator VASP uses its private key and the callback_url to construct the signature in callback.",
        "summary": "Bridge/PermissionRequest",
        "tags": [
          "Bridge"
        ],
        "operationId": "Bridge/PermissionRequest",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bridgePermissionRequest"
              },
              "example": {
                "data": {
                  "private_info": "04f76bf0372c4d4679a172aaaf7fe4746cb83f2a2e5d6a5afcfe6bba72ad4c540d7940853f5fd1f4928c541c39efae81e9165598bad256fab77f6d5c4bd8d135b0553e61bbaeb6d573c71b23d656ed9e4ac37f40106ebd3aab8839c77409a3890b5f056d4e11aaf87c6d29580869ec5f81d20ecaad266ba69e234a2eb627d5c7b95957d82fd1b69172f6bce480f74d9f4ea7d4d38300669c25723e91c5bce83ec8f29aedd4",
                  "transaction": {
                    "originator_vasp": {
                      "vasp_code": "VASPJPJT4",
                      "addrs": [
                        {
                          "address": "bnb1vynn9hamtqg9me7y6frja0rvfva9saprl55gl4",
                          "addr_extra_info": [
                            {
                              "memo_text": "634346542"
                            }
                          ]
                        }
                      ]
                    },
                    "beneficiary_vasp": {
                      "vasp_code": "VASPJPJT3",
                      "addrs": [
                        {
                          "address": "bnb1hj767k8nlf0jn6p3c3wvl0r0qfwfrvuxrqlxce",
                          "addr_extra_info": [
                            {
                              "memo_text": "Idzl1532434853"
                            }
                          ]
                        }
                      ]
                    },
                    "currency_id": "sygna:0x800002ca.bnb1u9j9hkst6gf09dkdvxlj7puk8c7vh68a0kkmht",
                    "amount": "0.1234"
                  },
                  "data_dt": "2019-07-29T06:29:00.123Z",
                  "expire_date": 1582218947,
                  "signature": "ad44461b212b2360469540d4737f378a60ca0c69d802142198ed1f222c0b570c5078931e173d26e0f6600305f97184e3de32d028ffe38fe1d0cc86ead3b01ed8"
                },
                "callback": {
                  "callback_url": "http://ec2-3-19-59-48.us-east-2.compute.amazonaws.com:7676/api/v1.1.0/originator/transaction/permission",
                  "signature": "62bfe28b58d0e53b3b4fb0d246d954a4088d7d236769f394af2b4c230cc8093f27644596e695563ed37d0fe004b0c6c8b91873ef96315d32703a998c5e92e603"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transfer_id": {
                      "$ref": "#/components/schemas/bridgeTransferID"
                    }
                  },
                  "required": [
                    "transfer_id"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "transfer_id": "778c0befbb99b21e398c545455622198b14ce403afa13f2b371349ff93da78a1"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Incorrect column (eg. \"tag\" ➝ \"Tag\") when hitting the API with the currency type having extra_info.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "err_code": {
                      "type": "string"
                    },
                    "err_message": {
                      "type": "string"
                    },
                    "err_code_stacks": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "status": 400,
                      "err_code": "010364",
                      "err_message": "The addr_extra_info of sygna:0x80000090 is [\"tag\"], but the following address have invalid addr_extra_info : {\"1BYJxAZNVcSeSbtKCHRXxokX31yjWaZczb\":[\"Tag\"]}",
                      "err_code_stacks": [
                        "010202",
                        "010364"
                      ]
                    }
                  }
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": 400,
                      "err_code": "010364",
                      "err_message": "The addr_extra_info of sygna:0x80000090 is [\"tag\"], but the following address have invalid addr_extra_info : {\"1BYJxAZNVcSeSbtKCHRXxokX31yjWaZczb\":[\"Tag\"]}",
                      "err_code_stacks": [
                        "010202",
                        "010364"
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Use an incorrenct private key to sign the API request body.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "err_code": {
                      "type": "string"
                    },
                    "err_message": {
                      "type": "string"
                    },
                    "err_code_stacks": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "status": 403,
                      "err_code": "010205",
                      "err_message": "Verify originator's data signature failed.",
                      "err_code_stacks": [
                        "010202",
                        "010205"
                      ]
                    }
                  }
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": 403,
                      "err_code": "010205",
                      "err_message": "Verify originator's data signature failed.",
                      "err_code_stacks": [
                        "010202",
                        "010205"
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Input a \"Not supported currency_id\" in the API request body.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "err_code": {
                      "type": "string"
                    },
                    "err_message": {
                      "type": "string"
                    },
                    "err_code_stacks": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "status": 404,
                      "err_code": "010362",
                      "err_message": "The currency_id(sygna:0x???) is not supported by Sygna Bridge.",
                      "err_code_stacks": [
                        "010202",
                        "010362"
                      ]
                    }
                  }
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": 404,
                      "err_code": "010362",
                      "err_message": "The currency_id(sygna:0x???) is not supported by Sygna Bridge.",
                      "err_code_stacks": [
                        "010202",
                        "010362"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bridge/transaction/permission": {
      "post": {
        "description": "This request works as a response to Bridge's [Permission Request](ref:bridgepermissionrequest-3). Whenever a beneficiary VASP finishes processing the request from Bridge, it must post a permission request back to Bridge server, containing the confirmation result.\n\n\n![](https://i.imgur.com/ozJ6or4.png)  \nThe Beneficiary VASP signs the body parameters with its private key to construct the signature.",
        "summary": "Bridge/Permission",
        "tags": [
          "Bridge"
        ],
        "operationId": "Bridge/Permission",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bridgePermission"
              },
              "example": {
                "transfer_id": "ad468f326ebcc2242c32aa6bf7084c44135a068d939e52c08b6d2e86eb9ef725",
                "permission_status": "ACCEPTED",
                "signature": "309f14db5fe4c33e9ebd770d110a89a93c1c9f68b8e1aac18097c1078ffb5a292f4132501ab1e3bf1f9ee3c3f8a9fd9c3f94ac403a5370eb38a6cdece8d7d1cc"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bridgeApiResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "status": "OK"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bridge/transaction/txid": {
      "post": {
        "description": "Submit broadcasted transaction ID on the blockchain for Bridge to keep as a record.  \nThe Originator VASP uses its private key to construct the signature that includes the body parameters.",
        "summary": "Bridge/TransactionID",
        "tags": [
          "Bridge"
        ],
        "operationId": "Bridge/TransactionID",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bridgeTransactionID"
              },
              "example": {
                "transfer_id": "ad468f326ebcc2242c32aa6bf7084c44135a068d939e52c08b6d2e86eb9ef725",
                "txid": "f4184fc596403b9d638783cf57adfe4c75c605f6356fbc91338530e9831e9e16",
                "signature": "6e8e259319f22df4dcb1a03cf701baf2d7fbd668fe3250f60ed12bb5c462fb712e9b68069ec0893042188a81a384da1fec5eb06173fadd327318db8430e606eb"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bridgeApiResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "status": "OK"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bridge/transaction/retry": {
      "post": {
        "description": "It is a brand new API that will let VASPs to retrieve the lost transfer requests in their server downtime. We will queue up the fail API requests sent to VASPs and resent the request again if Bridge/Retry is trigger. So make sure you make this API request after you restart the server.",
        "summary": "Bridge/Retry",
        "tags": [
          "Bridge"
        ],
        "operationId": "Bridge/Retry",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "vasp_code": {
                    "description": "Please input your own VASP code only to retrieve the API request toward your VASP code.",
                    "$ref": "#/components/schemas/bridgeVaspCode"
                  }
                },
                "required": [
                  "vasp_code"
                ]
              },
              "example": {
                "vasp_code": "VASPJPJT3"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "retryItems": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "retryItems"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "retryItems": 2
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bridge/wallet-address-filter": {
      "post": {
        "description": "To identify the specific wallet address that belongs to a VASP or an un-hosted wallet. A transacting risk score of the wallet address will be returned if the wallet address belongs to an un-hosted wallet by your selected blockchain analytics vendor. If you have not collaborated with any blockchain analytics vendor, please contact services@sygna.io.",
        "summary": "Bridge/Wallet Address Filter",
        "tags": [
          "Bridge"
        ],
        "operationId": "Bridge/wallet-address-filter",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ignore_kyt",
            "description": "retrieve address information which is only from Sygna database if ignore-kyt is true",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": "true"
            }
          }
        ],
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bridgeWalletAddressFilter"
              },
              "example": {
                "currency_id": "sygna:0x80000000",
                "addrs": [
                  "3AA9WEizEB5yNmiUCWq6SkCjf3tZc8q3Yn",
                  "1KFHE7w8BhaENAswwryaoccDb6qcT6DbYY",
                  "35hK24tcLEWcgNA4JxpvbkNkoAcDGqQPsP",
                  "1My95vMmr8DCQoddSckCKGGCTfjMYmepLj"
                ]
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Succeed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bridgeWalletAddressFilterRes"
                },
                "example": [
                  {
                    "type": "SYGNA_VASP",
                    "is_vasp": true,
                    "address": "1KFHE7w8BhaENAswwryaoccDb6qcT6DbYY",
                    "currency_id": "sygna:0x80000000"
                  },
                  {
                    "type": "OTHER_VASP",
                    "is_vasp": true,
                    "address": "3AA9WEizEB5yNmiUCWq6SkCjf3tZc8q3Yn",
                    "currency_id": "sygna:0x80000000",
                    "extra_data": {
                      "risk_score": -1,
                      "asset": "BTC",
                      "hash": "3AA9WEizEB5yNmiUCWq6SkCjf3tZc8q3Yn",
                      "triggered_rules": "Exchange",
                      "usd_worth": 7570011.56
                    }
                  },
                  {
                    "type": "OTHER_VASP",
                    "is_vasp": true,
                    "address": "35hK24tcLEWcgNA4JxpvbkNkoAcDGqQPsP",
                    "currency_id": "sygna:0x80000000",
                    "extra_data": {
                      "risk_score": -1,
                      "asset": "BTC",
                      "hash": "35hK24tcLEWcgNA4JxpvbkNkoAcDGqQPsP",
                      "triggered_rules": "Exchange",
                      "usd_worth": 70365261387.35
                    }
                  },
                  {
                    "type": "PRIVATE_WALLET",
                    "is_vasp": false,
                    "address": "1My95vMmr8DCQoddSckCKGGCTfjMYmepLj",
                    "currency_id": "sygna:0x80000000",
                    "extra_data": {
                      "risk_score": 0,
                      "asset": "BTC",
                      "hash": "1My95vMmr8DCQoddSckCKGGCTfjMYmepLj",
                      "triggered_rules": "Ponzi Scheme",
                      "usd_worth": 118066.19
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/beneficiary/transaction/address-validation": {
      "post": {
        "description": "Originator VASP can check if the beneficiary VASP owns the wallet address before originator personal information is sent. You can activate this function In the Bridge/PermissionRequest API with need_validate_addr parameter to truth.  \nSygna Bridge uses its private key to construct the signature that includes the body parameters.",
        "summary": "Beneficiary/AddressValidation",
        "tags": [
          "VASP API"
        ],
        "operationId": "Beneficiary/AddressValidation",
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addressValidationReq"
              },
              "example": {
                "vasp_code": "VASPUSNY2",
                "address": [
                  "bnb1hj767k8nlf0jn6p3c3wvl0r0qfwfrvuxrqlxce"
                ],
                "signature": "2fef986cae387df247eb3556de8e0d26737907304424e35da47686e40eb3919b462da47e0701fdb26e7657d732b384937df41adcd227ea3c542b5053fd8d198d"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/addressValidationRes"
                },
                "example": {
                  "vasp_code": "VASPUSNY2",
                  "address": [
                    "bnb1hj767k8nlf0jn6p3c3wvl0r0qfwfrvuxrqlxce"
                  ],
                  "is_valid": true,
                  "signature": "117a6532f9de8e2274cf5302b3d66efb1c9e3830a53e920cc89e02ae34c70d2111d31f41b17d43c8644cd1d04c55e21ba8e88a81b71a4836a1332809a2c5f0b5"
                }
              }
            }
          }
        }
      }
    },
    "/beneficiary/transaction/permission-request": {
      "post": {
        "description": "![](https://i.imgur.com/olaT2wV.png)\n\nWhen Bridge gets a [**Permission Request**](ref:permission-request), it will verify the request first to ensure the data integrity, and then **Relay the request to corresponding beneficiary server**.  \nThe Originator VASP should use its private key to construct a signature that includes the body parameters.",
        "summary": "Beneficiary/PermissionRequest",
        "tags": [
          "VASP API"
        ],
        "operationId": "Beneficiary/PermissionRequest",
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/bridgePermissionRequestData"
                  },
                  "transfer_id": {
                    "$ref": "#/components/schemas/bridgeTransferID"
                  }
                }
              },
              "example": {
                "data": {
                  "private_info": "04a939a2c1f47d5d5f1a17148c7ac53b3d16b13adc9adc373abaab765fd09d0983a4b32729db6cdc8c2328a6ad577daee2c7c6a430ad746c11f760eb426c688143d44349895e355d1b9b80fe19ea677b63d4382849ee6d1b3219941717e4672f3da5c5104baf45486fde3d1e5973d3de13704a4b64a5e67fe07c9fa4efa5c02cdc292e22c683f1c59f81c40d39a70a46221af9faf85aef1604745b965104c04e88431a1f025d1a4e981d0b94f94cc3dfacffd7432a97314931be5b0b90d99ba1b9544eb001",
                  "transaction": {
                    "originator_vasp": {
                      "vasp_code": "VASPUSNY1",
                      "addrs": [
                        {
                          "address": "bnb1vynn9hamtqg9me7y6frja0rvfva9saprl55gl4",
                          "addr_extra_info": [
                            {
                              "tag": "123"
                            }
                          ]
                        },
                        {
                          "address": "bnb1vynn9hamtqg9me7y6frja0rvfva9saprl55gl5",
                          "addr_extra_info": []
                        }
                      ]
                    },
                    "beneficiary_vasp": {
                      "vasp_code": "VASPUSNY2",
                      "addrs": [
                        {
                          "address": "bnb1hj767k8nlf0jn6p3c3wvl0r0qfwfrvuxrqlxce"
                        }
                      ]
                    },
                    "currency_id": "sygna:0x80000090",
                    "amount": "1.235"
                  },
                  "data_dt": "2019-07-29T06:29:00.123Z",
                  "expire_date": 4107667801000,
                  "need_validate_addr": false,
                  "signature": "7050e1f4e9ceb01161a62e22219a31891c2d4e1bb50b889ceea1c12e5a63d02d3e60624383db0f423fe0941fc72af5233dd33fd7b5c02546690fe641b683acc5"
                },
                "transfer_id": "abf3fa77c999b1f29cf242240faf27f4f493eab7a19a7a6ad56f040f39e81c6b"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bridgeApiResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "status": "OK"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/beneficiary/transaction/txid": {
      "post": {
        "description": "After originator VASP submit transaction ID on the blockchain and post to Bridge, Bridge will relay the data to corresponding beneficiary server.  \nThe Originator VASP uses its private key to construct the signature that includes the body parameters.",
        "summary": "Beneficiary/TransactionID",
        "tags": [
          "VASP API"
        ],
        "operationId": "Beneficiary/TransactionID",
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bridgeTransactionID"
              },
              "example": {
                "transfer_id": "ad468f326ebcc2242c32aa6bf7084c44135a068d939e52c08b6d2e86eb9ef725",
                "txid": "f4184fc596403b9d638783cf57adfe4c75c605f6356fbc91338530e9831e9e16",
                "signature": "6e8e259319f22df4dcb1a03cf701baf2d7fbd668fe3250f60ed12bb5c462fb712e9b68069ec0893042188a81a384da1fec5eb06173fadd327318db8430e606eb"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bridgeApiResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "status": "OK"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/originator/transaction/permission": {
      "post": {
        "description": "![](https://i.imgur.com/15ZJKFt.png)\n\nEach VASP needs to implement a permission endpoint to get a notification from bridge\n\nWhen an originator posts a permission request to Bridge, it needs to attach this url in callback_url.  \nThe Beneficiary VASP signs the body parameters with its private key to construct the signature.",
        "summary": "Originator/Permission",
        "tags": [
          "VASP API"
        ],
        "operationId": "Originator/Permission",
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bridgePermission"
              },
              "example": {
                "transfer_id": "ad468f326ebcc2242c32aa6bf7084c44135a068d939e52c08b6d2e86eb9ef725",
                "permission_status": "ACCEPTED",
                "signature": "309f14db5fe4c33e9ebd770d110a89a93c1c9f68b8e1aac18097c1078ffb5a292f4132501ab1e3bf1f9ee3c3f8a9fd9c3f94ac403a5370eb38a6cdece8d7d1cc"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bridgeApiResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "status": "OK"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Bridge"
    },
    {
      "name": "VASP API"
    }
  ],
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "name": "x-api-key",
        "in": "header"
      }
    },
    "schemas": {
      "bridgeVaspData": {
        "title": "vasp_data",
        "type": "object",
        "properties": {
          "vasp_code": {
            "$ref": "#/components/schemas/bridgeVaspCode"
          },
          "vasp_name": {
            "type": "string",
            "minLength": 1
          },
          "vasp_pubkey": {
            "type": "string",
            "minLength": 130
          },
          "vaspOtherName": {
            "type": "string",
            "minLength": 1
          },
          "supervisoryAuthority": {
            "type": "string",
            "minLength": 1
          },
          "countryCode": {
            "type": "string",
            "minLength": 1
          },
          "licenseRegistrationId": {
            "type": "string",
            "minLength": 1
          },
          "regulatoryStatus": {
            "type": "string",
            "minLength": 1
          },
          "vasp_server_status": {
            "type": "string",
            "enum": [
              "healthy",
              "unhealthy",
              "unknown"
            ]
          },
          "last_server_checked_at": {
            "$ref": "#/components/schemas/bridgeDate"
          },
          "vasp_sygna_registration_type": {
            "type": "string"
          }
        },
        "required": [
          "vasp_code",
          "vasp_name",
          "vasp_pubkey",
          "regulatoryStatus",
          "vasp_sygna_registration_type"
        ],
        "additionalProperties": false
      },
      "bridgeVaspCode": {
        "title": "vasp_code",
        "type": "string",
        "minLength": 8
      },
      "bridgeVasp": {
        "title": "Vasp",
        "type": "object",
        "properties": {
          "vasp_data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bridgeVaspData"
            }
          },
          "timestamp": {
            "type": "integer",
            "minimum": 0
          },
          "signature": {
            "$ref": "#/components/schemas/bridgeSignature"
          }
        },
        "required": [
          "vasp_data",
          "timestamp",
          "signature"
        ],
        "additionalProperties": false
      },
      "bridgeCallbackUrl": {
        "title": "CallbackUrl",
        "type": "object",
        "minProperties": 3,
        "additionalProperties": false,
        "properties": {
          "vasp_code": {
            "$ref": "#/components/schemas/bridgeVaspCode"
          },
          "callback_permission_request_url": {
            "type": "string",
            "format": "url",
            "description": "#Example: https://<domain>/v1/callbacks/permission-request"
          },
          "callback_txid_url": {
            "type": "string",
            "format": "url",
            "description": "#Example: https://<domain>/v1/callbacks/txid"
          },
          "callback_validate_addr_url": {
            "type": "string",
            "format": "url",
            "description": "#Example: https://<domain>/v1/callbacks/address-validation"
          },
          "callback_vasp_server_health_check_url": {
            "type": "string",
            "format": "url",
            "description": "#Example: https://<domain>/v1/vasp-server-status"
          },
          "signature": {
            "$ref": "#/components/schemas/bridgeSignature"
          }
        },
        "required": [
          "vasp_code",
          "signature"
        ]
      },
      "bridgeCurrencyItem": {
        "title": "CurrencyItem",
        "type": "object",
        "properties": {
          "currency_id": {
            "type": "string"
          },
          "currency_name": {
            "type": "string"
          },
          "currency_symbol": {
            "type": "string"
          },
          "is_active": {
            "type": "boolean"
          },
          "addr_extra_info": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "platform": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "symbol": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "token_address": {
                "type": "string"
              }
            },
            "required": [
              "id",
              "symbol",
              "name",
              "token_address"
            ],
            "nullable": true
          }
        },
        "required": [
          "currency_id",
          "currency_name",
          "currency_symbol",
          "is_active",
          "addr_extra_info",
          "platform"
        ],
        "additionalProperties": false
      },
      "bridgeSupportedCoins": {
        "title": "supported_coins",
        "type": "object",
        "properties": {
          "supported_coins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bridgeCurrencyItem"
            }
          }
        },
        "required": [
          "supported_coins"
        ]
      },
      "bridgePrivateInfo": {
        "title": "private_info",
        "type": "string",
        "description": "ECIES encoded [Private Information](ref:private-information)"
      },
      "bridgeAddress": {
        "title": "addrs",
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "minLength": 1
          },
          "addr_extra_info": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "address"
        ]
      },
      "bridgeOriginatorVasp": {
        "title": "originator_vasp",
        "type": "object",
        "properties": {
          "vasp_code": {
            "$ref": "#/components/schemas/bridgeVaspCode"
          },
          "addrs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bridgeAddress"
            },
            "minItems": 1
          }
        },
        "required": [
          "vasp_code",
          "addrs"
        ]
      },
      "bridgeBeneficiaryVasp": {
        "title": "beneficiary_vasp",
        "type": "object",
        "properties": {
          "vasp_code": {
            "$ref": "#/components/schemas/bridgeVaspCode"
          },
          "addrs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bridgeAddress"
            },
            "minItems": 1
          }
        },
        "required": [
          "vasp_code",
          "addrs"
        ]
      },
      "bridgeTransaction": {
        "title": "transaction",
        "type": "object",
        "properties": {
          "originator_vasp": {
            "$ref": "#/components/schemas/bridgeOriginatorVasp"
          },
          "beneficiary_vasp": {
            "$ref": "#/components/schemas/bridgeBeneficiaryVasp"
          },
          "currency_id": {
            "type": "string",
            "minLength": 1
          },
          "amount": {
            "type": "string",
            "minLength": 1
          },
          "txid": {
            "type": "string",
            "x-stoplight": {
              "id": "zukffrz7rpfmm"
            },
            "description": "(After the new version est. May 2023) Allow Sygna Bridge VASP to send txid (=transaction ID =transaction hash) at the first place by hitting <POST /permission-request> and at any point by hitting <POST /txid> during the data transfer."
          }
        },
        "required": [
          "originator_vasp",
          "beneficiary_vasp",
          "currency_id",
          "amount"
        ]
      },
      "bridgeTransferData": {
        "title": "transferData",
        "type": "object",
        "properties": {
          "transfer_id": {
            "$ref": "#/components/schemas/bridgeTransferID"
          },
          "transaction": {
            "title": "Transaction",
            "type": "object",
            "properties": {
              "originator_vasp": {
                "$ref": "#/components/schemas/bridgeOriginatorVasp"
              },
              "beneficiary_vasp": {
                "$ref": "#/components/schemas/bridgeBeneficiaryVasp"
              },
              "currency_id": {
                "type": "string"
              }
            },
            "required": [
              "originator_vasp",
              "beneficiary_vasp",
              "currency_id"
            ]
          },
          "data_dt": {
            "$ref": "#/components/schemas/bridgeDate"
          },
          "expire_date": {
            "$ref": "#/components/schemas/bridgeExpireDate"
          },
          "permission_request_data_signature": {
            "$ref": "#/components/schemas/bridgeNullableSignature"
          },
          "permission_status": {
            "type": "string",
            "nullable": true,
            "enum": [
              "ACCEPTED",
              "REJECTED",
              null
            ]
          },
          "permission_signature": {
            "$ref": "#/components/schemas/bridgeNullableSignature"
          },
          "txid_signature": {
            "$ref": "#/components/schemas/bridgeNullableSignature"
          },
          "created_at": {
            "$ref": "#/components/schemas/bridgeDate"
          },
          "transfer_to_originator_time": {
            "type": "string",
            "nullable": true
          },
          "reject_code": {
            "type": "string",
            "nullable": true,
            "enum": [
              "BVRC001",
              "BVRC002",
              "BVRC003",
              "BVRC004",
              "BVRC005",
              "BVRC006",
              "BVRC007",
              "BVRC999",
              null
            ]
          },
          "reject_message": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "transfer_id",
          "transaction",
          "data_dt",
          "created_at"
        ],
        "additionalProperties": false
      },
      "bridgeTransferStatus": {
        "title": "TransferStatus",
        "type": "object",
        "properties": {
          "transferData": {
            "$ref": "#/components/schemas/bridgeTransferData"
          },
          "signature": {
            "$ref": "#/components/schemas/bridgeSignature"
          }
        }
      },
      "bridgeCallback": {
        "title": "callback",
        "description": "Please see [Callback](ref:callback)",
        "type": "object",
        "properties": {
          "callback_url": {
            "type": "string"
          },
          "signature": {
            "$ref": "#/components/schemas/bridgeSignature"
          }
        },
        "required": [
          "callback_url",
          "signature"
        ],
        "additionalProperties": false
      },
      "bridgePermissionRequestData": {
        "title": "PermissionRequestData",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "private_info": {
            "$ref": "#/components/schemas/bridgePrivateInfo"
          },
          "transaction": {
            "$ref": "#/components/schemas/bridgeTransaction"
          },
          "data_dt": {
            "$ref": "#/components/schemas/bridgeDate"
          },
          "expire_date": {
            "$ref": "#/components/schemas/bridgeExpireDate"
          },
          "need_validate_addr": {
            "type": "boolean",
            "description": "need validate beneficary address"
          },
          "forced_sending_when_VASP_is_not_healthy": {
            "type": "boolean",
            "description": "True: Forced sending data transfers even counterparty VASP server status is NOT healthy.\nThe data transfer will still be successfully sent out by oVASP to the Sygna server.\n\nFalse: Do not force sending data transfers when the counterparty VASP server status is NOT healthy.\nThe data transfer will not be sent out. The oVASP needs to resend the data transfer manually."
          },
          "signature": {
            "$ref": "#/components/schemas/bridgeSignature"
          }
        },
        "required": [
          "private_info",
          "transaction",
          "data_dt",
          "signature"
        ]
      },
      "bridgePermissionRequest": {
        "title": "PermissionRequest",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/bridgePermissionRequestData"
          },
          "callback": {
            "$ref": "#/components/schemas/bridgeCallback"
          }
        },
        "additionalProperties": false
      },
      "bridgeRejectCode": {
        "title": "reject_code",
        "description": "Only required when the permission_status is REJECTED, reply with [BVRC](ref:beneficiary-vasp-rejected-code).",
        "type": "string",
        "minLength": 1,
        "enum": [
          "BVRC001",
          "BVRC002",
          "BVRC003",
          "BVRC004",
          "BVRC005",
          "BVRC006",
          "BVRC007",
          "BVRC999"
        ]
      },
      "bridgeRejectMessage": {
        "title": "reject_message",
        "description": "Only required when the permission_status is REJECTED and reject_code is 'BVRC999', reply with [BVRC](ref:beneficiary-vasp-rejected-code).",
        "type": "string"
      },
      "bridgePermissionStatus": {
        "title": "permission_status",
        "type": "string",
        "minLength": 1,
        "enum": [
          "ACCEPTED",
          "REJECTED"
        ],
        "description": "Status of the transfer permission, currently available values: ACCEPTED, REJECTED."
      },
      "bridgePermission": {
        "title": "Permission",
        "type": "object",
        "properties": {
          "transfer_id": {
            "$ref": "#/components/schemas/bridgeTransferID"
          },
          "permission_status": {
            "$ref": "#/components/schemas/bridgePermissionStatus"
          },
          "expire_date": {
            "$ref": "#/components/schemas/bridgeExpireDate"
          },
          "reject_code": {
            "$ref": "#/components/schemas/bridgeRejectCode"
          },
          "reject_message": {
            "$ref": "#/components/schemas/bridgeRejectMessage"
          },
          "forced_sending_when_VASP_is_not_healthy": {
            "type": "boolean",
            "description": "check vasp status or not"
          },
          "signature": {
            "$ref": "#/components/schemas/bridgeSignature"
          }
        },
        "required": [
          "transfer_id",
          "permission_status",
          "signature"
        ],
        "additionalProperties": false
      },
      "bridgeDate": {
        "title": "data_dt",
        "description": "Unix timestamp using ISO 8601 format(yyyy-MM-dd'T'hh:mm:ss.sssZ)",
        "type": "string",
        "pattern": "^[1-9][0-9]{3}-[0-1][0-9]-[0-3][0-9]T[0-2][0-9]:[0-5][0-9]:[0-5][0-9].[0-9]{3}Z$"
      },
      "bridgeSignature": {
        "title": "signature",
        "description": "Signature of the object that includes the constraint fields.",
        "type": "string",
        "minLength": 128,
        "maxLength": 128,
        "pattern": "^[0123456789A-Fa-f]+$"
      },
      "bridgeNullableSignature": {
        "title": "NullableSignature",
        "type": "string",
        "nullable": true,
        "minLength": 128,
        "maxLength": 128,
        "pattern": "^[0123456789A-Fa-f]+$"
      },
      "bridgeTransferID": {
        "title": "transfer_id",
        "description": "Unique Id generated by Bridge",
        "type": "string",
        "minLength": 64,
        "maxLength": 64
      },
      "bridgeExpireDate": {
        "title": "expire_date",
        "description": "Unix timestamp.To set an expiry date of your transfer request. Bridge will stop relaying transfer requests once the transfer expires.",
        "type": "integer",
        "minimum": 0
      },
      "bridgeTransactionID": {
        "title": "TransactionID",
        "type": "object",
        "properties": {
          "transfer_id": {
            "$ref": "#/components/schemas/bridgeTransferID"
          },
          "txid": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[0123456789A-Za-z]+$"
          },
          "signature": {
            "$ref": "#/components/schemas/bridgeSignature"
          }
        },
        "required": [
          "transfer_id",
          "txid",
          "signature"
        ]
      },
      "addressValidationReq": {
        "title": "AddressValidationReq",
        "description": "Request to verify beneficiary address",
        "type": "object",
        "properties": {
          "vasp_code": {
            "$ref": "#/components/schemas/bridgeVaspCode"
          },
          "address": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "signature": {
            "$ref": "#/components/schemas/bridgeSignature"
          }
        },
        "required": [
          "vasp_code",
          "address",
          "signature"
        ]
      },
      "addressValidationRes": {
        "title": "AddressValidationRes",
        "description": "This response (\"is_valid\") means the beneficairy address is valid.",
        "type": "object",
        "properties": {
          "vasp_code": {
            "$ref": "#/components/schemas/bridgeVaspCode"
          },
          "address": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "is_valid": {
            "type": "boolean"
          },
          "signature": {
            "$ref": "#/components/schemas/bridgeSignature"
          }
        },
        "required": [
          "vasp_code",
          "address",
          "signature"
        ]
      },
      "bridgeApiResponse": {
        "title": "ApiResponse",
        "description": "Successful operation",
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          }
        },
        "required": [
          "status"
        ]
      },
      "bridgeWalletAddressFilter": {
        "title": "WalletAddressFilter",
        "description": "Wallet Address Filter",
        "type": "object",
        "properties": {
          "currency_id": {
            "type": "string"
          },
          "addrs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "currency_id",
          "addrs"
        ]
      },
      "bridgeWalletAddressFilterRes": {
        "title": "WalletAddressFilterResponse",
        "description": "the response of WalletAddressFilter Api",
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "is_vasp": {
            "type": "boolean"
          },
          "address": {
            "type": "string"
          },
          "currency_id": {
            "type": "string"
          },
          "extra_data": {
            "$ref": "#/components/schemas/WalletAddressFilterExtraData"
          }
        },
        "required": [
          "type",
          "address",
          "currency_id"
        ]
      },
      "WalletAddressFilterExtraData": {
        "title": "WalletAddressFilterExtraData",
        "description": "",
        "type": "object",
        "properties": {
          "risk_score": {
            "type": "number"
          },
          "asset": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          },
          "triggered_rules": {
            "type": "string"
          },
          "usd_worth": {
            "type": "number"
          },
          "vasp_code": {
            "type": "string",
            "minLength": 1
          },
          "notification_receivers": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "minItems": 1
          }
        }
      }
    }
  }
}
